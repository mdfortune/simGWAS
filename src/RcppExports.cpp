// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <Rcpp.h>

using namespace Rcpp;

// MatrixVector
NumericVector MatrixVector(const NumericMatrix& matrix, const NumericVector& vector, const bool verbose);
RcppExport SEXP _simGWAS_MatrixVector(SEXP matrixSEXP, SEXP vectorSEXP, SEXP verboseSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const NumericMatrix& >::type matrix(matrixSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type vector(vectorSEXP);
    Rcpp::traits::input_parameter< const bool >::type verbose(verboseSEXP);
    rcpp_result_gen = Rcpp::wrap(MatrixVector(matrix, vector, verbose));
    return rcpp_result_gen;
END_RCPP
}
// zscore
double zscore(const double N0, const double N1, const NumericVector& Ufactor, const NumericVector& powerfactor, const NumericVector& PX1W, const NumericVector& PX2W);
RcppExport SEXP _simGWAS_zscore(SEXP N0SEXP, SEXP N1SEXP, SEXP UfactorSEXP, SEXP powerfactorSEXP, SEXP PX1WSEXP, SEXP PX2WSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const double >::type N0(N0SEXP);
    Rcpp::traits::input_parameter< const double >::type N1(N1SEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type Ufactor(UfactorSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type powerfactor(powerfactorSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type PX1W(PX1WSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type PX2W(PX2WSEXP);
    rcpp_result_gen = Rcpp::wrap(zscore(N0, N1, Ufactor, powerfactor, PX1W, PX2W));
    return rcpp_result_gen;
END_RCPP
}
// psum
double psum(const NumericVector& x, const NumericVector& y);
RcppExport SEXP _simGWAS_psum(SEXP xSEXP, SEXP ySEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const NumericVector& >::type x(xSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type y(ySEXP);
    rcpp_result_gen = Rcpp::wrap(psum(x, y));
    return rcpp_result_gen;
END_RCPP
}
// haplabs
std::vector< std::string > haplabs(const int n);
RcppExport SEXP _simGWAS_haplabs(SEXP nSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const int >::type n(nSEXP);
    rcpp_result_gen = Rcpp::wrap(haplabs(n));
    return rcpp_result_gen;
END_RCPP
}
// happrobs
NumericVector happrobs(const NumericMatrix& G, const NumericVector& P);
RcppExport SEXP _simGWAS_happrobs(SEXP GSEXP, SEXP PSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const NumericMatrix& >::type G(GSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type P(PSEXP);
    rcpp_result_gen = Rcpp::wrap(happrobs(G, P));
    return rcpp_result_gen;
END_RCPP
}
// meanC
double meanC(NumericVector x);
RcppExport SEXP _simGWAS_meanC(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(meanC(x));
    return rcpp_result_gen;
END_RCPP
}
// combinationRefs
NumericMatrix combinationRefs(const IntegerMatrix& x, const IntegerMatrix& cols, const IntegerMatrix& reference, const NumericVector& prop, int shiftSize, int threads, bool verbose);
RcppExport SEXP _simGWAS_combinationRefs(SEXP xSEXP, SEXP colsSEXP, SEXP referenceSEXP, SEXP propSEXP, SEXP shiftSizeSEXP, SEXP threadsSEXP, SEXP verboseSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const IntegerMatrix& >::type x(xSEXP);
    Rcpp::traits::input_parameter< const IntegerMatrix& >::type cols(colsSEXP);
    Rcpp::traits::input_parameter< const IntegerMatrix& >::type reference(referenceSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type prop(propSEXP);
    Rcpp::traits::input_parameter< int >::type shiftSize(shiftSizeSEXP);
    Rcpp::traits::input_parameter< int >::type threads(threadsSEXP);
    Rcpp::traits::input_parameter< bool >::type verbose(verboseSEXP);
    rcpp_result_gen = Rcpp::wrap(combinationRefs(x, cols, reference, prop, shiftSize, threads, verbose));
    return rcpp_result_gen;
END_RCPP
}
// combination2
IntegerMatrix combination2(IntegerMatrix x, IntegerMatrix cols);
RcppExport SEXP _simGWAS_combination2(SEXP xSEXP, SEXP colsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< IntegerMatrix >::type x(xSEXP);
    Rcpp::traits::input_parameter< IntegerMatrix >::type cols(colsSEXP);
    rcpp_result_gen = Rcpp::wrap(combination2(x, cols));
    return rcpp_result_gen;
END_RCPP
}
// wsumsq
double wsumsq(const NumericVector& xx, const NumericVector& yy, const NumericVector& ww);
RcppExport SEXP _simGWAS_wsumsq(SEXP xxSEXP, SEXP yySEXP, SEXP wwSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const NumericVector& >::type xx(xxSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type yy(yySEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type ww(wwSEXP);
    rcpp_result_gen = Rcpp::wrap(wsumsq(xx, yy, ww));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_simGWAS_MatrixVector", (DL_FUNC) &_simGWAS_MatrixVector, 3},
    {"_simGWAS_zscore", (DL_FUNC) &_simGWAS_zscore, 6},
    {"_simGWAS_psum", (DL_FUNC) &_simGWAS_psum, 2},
    {"_simGWAS_haplabs", (DL_FUNC) &_simGWAS_haplabs, 1},
    {"_simGWAS_happrobs", (DL_FUNC) &_simGWAS_happrobs, 2},
    {"_simGWAS_meanC", (DL_FUNC) &_simGWAS_meanC, 1},
    {"_simGWAS_combinationRefs", (DL_FUNC) &_simGWAS_combinationRefs, 7},
    {"_simGWAS_combination2", (DL_FUNC) &_simGWAS_combination2, 2},
    {"_simGWAS_wsumsq", (DL_FUNC) &_simGWAS_wsumsq, 3},
    {NULL, NULL, 0}
};

RcppExport void R_init_simGWAS(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
