freqprob<-freq$Probability
df_control<-matrix(0,N0,)
nhap<-nrow(freq)
sample1a<-sample(x=1:nhap, size=N0, replace = TRUE, prob = freqprob)
sample1b<-sample(x=1:nhap, size=N0, replace = TRUE, prob = freqprob)
sample2a<-sample(x=1:nhap, size=N0, replace = TRUE, prob = freqprob)
sample2b<-sample(x=1:nhap, size=N0, replace = TRUE, prob = freqprob)
sample3a<-sample(x=1:nhap, size=N0, replace = TRUE, prob = freqprob)
sample3b<-sample(x=1:nhap, size=N0, replace = TRUE, prob = freqprob)
sample4a<-sample(x=1:nhap, size=N0, replace = TRUE, prob = freqprob)
sample4b<-sample(x=1:nhap, size=N0, replace = TRUE, prob = freqprob)
sample5a<-sample(x=1:nhap, size=N0, replace = TRUE, prob = freqprob)
sample5b<-sample(x=1:nhap, size=N0, replace = TRUE, prob = freqprob)
for (ii in 1:N0){
df_control[ii,1:10]<-freq[sample1a[ii],1:10]+freq[sample1b[ii],1:10]-1
df_control[ii,11:20]<-freq[sample2a[ii],1:10]+freq[sample2b[ii],1:10]-1
df_control[ii,21:30]<-freq[sample3a[ii],1:10]+freq[sample3b[ii],1:10]-1
df_control[ii,31:40]<-freq[sample4a[ii],1:10]+freq[sample4b[ii],1:10]-1
df_control[ii,41:50]<-freq[sample5a[ii],1:10]+freq[sample5b[ii],1:10]-1
}
library(snpStats)
library(lattice)
#We will use the first 50 SNPs of the IL2RA region, in blocks of 10
#check the R2 within the LD blocks we will use
load("~/refdatasets/datafilesD/D_chr10_6068495_6237542.RData")
#df<-df.t1d[which(df.t1d[,1]==0),-1]
#XX<-new("SnpMatrix", as.matrix(df))
#LD <- snpStats::ld(XX,XX,stat="R.squared")
load("~/freqdatasets/T1D_regions/D_chr10_6068495_6237542_freq.RData")
#Make a large dataset of "controls" assuming these 5 blocks have no LD between them
N0<-20000
freqprob<-freq$Probability
df_control<-matrix(0,N0,50)
nhap<-nrow(freq)
sample1a<-sample(x=1:nhap, size=N0, replace = TRUE, prob = freqprob)
sample1b<-sample(x=1:nhap, size=N0, replace = TRUE, prob = freqprob)
sample2a<-sample(x=1:nhap, size=N0, replace = TRUE, prob = freqprob)
sample2b<-sample(x=1:nhap, size=N0, replace = TRUE, prob = freqprob)
sample3a<-sample(x=1:nhap, size=N0, replace = TRUE, prob = freqprob)
sample3b<-sample(x=1:nhap, size=N0, replace = TRUE, prob = freqprob)
sample4a<-sample(x=1:nhap, size=N0, replace = TRUE, prob = freqprob)
sample4b<-sample(x=1:nhap, size=N0, replace = TRUE, prob = freqprob)
sample5a<-sample(x=1:nhap, size=N0, replace = TRUE, prob = freqprob)
sample5b<-sample(x=1:nhap, size=N0, replace = TRUE, prob = freqprob)
for (ii in 1:N0){
df_control[ii,1:10]<-freq[sample1a[ii],1:10]+freq[sample1b[ii],1:10]-1
df_control[ii,11:20]<-freq[sample2a[ii],1:10]+freq[sample2b[ii],1:10]-1
df_control[ii,21:30]<-freq[sample3a[ii],1:10]+freq[sample3b[ii],1:10]-1
df_control[ii,31:40]<-freq[sample4a[ii],1:10]+freq[sample4b[ii],1:10]-1
df_control[ii,41:50]<-freq[sample5a[ii],1:10]+freq[sample5b[ii],1:10]-1
}
XX<-new("SnpMatrix", as.matrix(df_control))
LD <- snpStats::ld(XX,XX,stat="R.squared")
nhap
df_control<-matrix(0,N0,50)
df_control[ii, 11:20]
freq[sample2a[ii],1:10]+freq[sample2b[ii],1:10]-1
for (ii in 1:N0){
df_control[ii,1:10]<-freq[sample1a[ii],1:10]+freq[sample1b[ii],1:10]-1
df_control[ii,11:20]<-freq[sample2a[ii],1:10]+freq[sample2b[ii],1:10]-1
df_control[ii,21:30]<-freq[sample3a[ii],1:10]+freq[sample3b[ii],1:10]-1
df_control[ii,31:40]<-freq[sample4a[ii],1:10]+freq[sample4b[ii],1:10]-1
df_control[ii,41:50]<-freq[sample5a[ii],1:10]+freq[sample5b[ii],1:10]-1
}
ii
df_control[ii,11:20]
df_control[ii,1:10]
head(df_control)
freq[sample1a[ii],1:10]+freq[sample1b[ii],1:10]-1
as.numeric(freq[sample1a[ii],1:10]+freq[sample1b[ii],1:10]-1)
as.numeric(freq[sample1a[ii],1:10]+freq[sample1b[ii],1:10]-1)[4]
N0<-20000
freqprob<-freq$Probability
df_control<-matrix(0,N0,50)
nhap<-nrow(freq)
sample1a<-sample(x=1:nhap, size=N0, replace = TRUE, prob = freqprob)
sample1b<-sample(x=1:nhap, size=N0, replace = TRUE, prob = freqprob)
sample2a<-sample(x=1:nhap, size=N0, replace = TRUE, prob = freqprob)
sample2b<-sample(x=1:nhap, size=N0, replace = TRUE, prob = freqprob)
sample3a<-sample(x=1:nhap, size=N0, replace = TRUE, prob = freqprob)
sample3b<-sample(x=1:nhap, size=N0, replace = TRUE, prob = freqprob)
sample4a<-sample(x=1:nhap, size=N0, replace = TRUE, prob = freqprob)
sample4b<-sample(x=1:nhap, size=N0, replace = TRUE, prob = freqprob)
sample5a<-sample(x=1:nhap, size=N0, replace = TRUE, prob = freqprob)
sample5b<-sample(x=1:nhap, size=N0, replace = TRUE, prob = freqprob)
for (ii in 1:N0){
df_control[ii,1:10]<-as.numeric(freq[sample1a[ii],1:10]+freq[sample1b[ii],1:10]-1)
df_control[ii,11:20]<-as.numeric(freq[sample2a[ii],1:10]+freq[sample2b[ii],1:10]-1)
df_control[ii,21:30]<-as.numeric(freq[sample3a[ii],1:10]+freq[sample3b[ii],1:10]-1)
df_control[ii,31:40]<-as.numeric(freq[sample4a[ii],1:10]+freq[sample4b[ii],1:10]-1)
df_control[ii,41:50]<-as.numeric(freq[sample5a[ii],1:10]+freq[sample5b[ii],1:10]-1)
}
XX<-new("SnpMatrix", as.matrix(df_control))
LD <- snpStats::ld(XX,XX,stat="R.squared")
levelplot(LD)
length(which(df.t1d[,1]==0))
unique(df.t1d[,5])
unique(df_contol[,5])
unique(df_control[,5])
max(LD)
max(LD[which(LD<1)])
max(LD[which(LD<0.9)])
max(LD[which(LD<0.99)])
N0<-20000
freqprob<-freq$Probability
df_control<-matrix(0,N0,50)
nhap<-nrow(freq)
sample1a<-sample(x=1:nhap, size=N0, replace = TRUE, prob = freqprob)
sample1b<-sample(x=1:nhap, size=N0, replace = TRUE, prob = freqprob)
sample2a<-sample(x=1:nhap, size=N0, replace = TRUE, prob = freqprob)
sample2b<-sample(x=1:nhap, size=N0, replace = TRUE, prob = freqprob)
sample3a<-sample(x=1:nhap, size=N0, replace = TRUE, prob = freqprob)
sample3b<-sample(x=1:nhap, size=N0, replace = TRUE, prob = freqprob)
sample4a<-sample(x=1:nhap, size=N0, replace = TRUE, prob = freqprob)
sample4b<-sample(x=1:nhap, size=N0, replace = TRUE, prob = freqprob)
sample5a<-sample(x=1:nhap, size=N0, replace = TRUE, prob = freqprob)
sample5b<-sample(x=1:nhap, size=N0, replace = TRUE, prob = freqprob)
for (ii in 1:N0){
df_control[ii,1:10]<-as.numeric(freq[sample1a[ii],1:10]+freq[sample1b[ii],1:10]-1)
df_control[ii,11:20]<-as.numeric(freq[sample2a[ii],1:10]+freq[sample2b[ii],1:10]-1)
df_control[ii,21:30]<-as.numeric(freq[sample3a[ii],1:10]+freq[sample3b[ii],1:10]-1)
df_control[ii,31:40]<-as.numeric(freq[sample4a[ii],1:10]+freq[sample4b[ii],1:10]-1)
df_control[ii,41:50]<-as.numeric(freq[sample5a[ii],1:10]+freq[sample5b[ii],1:10]-1)
}
XX<-new("SnpMatrix", as.matrix(df_control))
LD <- snpStats::ld(XX,XX,stat="R.squared")
max(LD[which(LD<0.99)])
df<-df.t1d[which(df.t1d[,1]==0),-1]
XX<-new("SnpMatrix", as.matrix(df[,1:50]))
LD <- snpStats::ld(XX,XX,stat="R.squared")
max(LD[which(LD<0.99)])
levelplot(LD)
load("~/freqdatasets/T1D_regions/D_chr10_31172479_31520710_freq.RData")
load("~/freqdatasets/T1D_regions/D_chr1_170882016_171208336_freq.RData")
#Make a large dataset of "controls" assuming these 5 blocks have no LD between them
N0<-20000
freqprob<-freq$Probability
df_control<-matrix(0,N0,50)
nhap<-nrow(freq)
sample1a<-sample(x=1:nhap, size=N0, replace = TRUE, prob = freqprob)
sample1b<-sample(x=1:nhap, size=N0, replace = TRUE, prob = freqprob)
sample2a<-sample(x=1:nhap, size=N0, replace = TRUE, prob = freqprob)
sample2b<-sample(x=1:nhap, size=N0, replace = TRUE, prob = freqprob)
sample3a<-sample(x=1:nhap, size=N0, replace = TRUE, prob = freqprob)
sample3b<-sample(x=1:nhap, size=N0, replace = TRUE, prob = freqprob)
sample4a<-sample(x=1:nhap, size=N0, replace = TRUE, prob = freqprob)
sample4b<-sample(x=1:nhap, size=N0, replace = TRUE, prob = freqprob)
sample5a<-sample(x=1:nhap, size=N0, replace = TRUE, prob = freqprob)
sample5b<-sample(x=1:nhap, size=N0, replace = TRUE, prob = freqprob)
for (ii in 1:N0){
df_control[ii,1:10]<-as.numeric(freq[sample1a[ii],1:10]+freq[sample1b[ii],1:10]-1)
df_control[ii,11:20]<-as.numeric(freq[sample2a[ii],1:10]+freq[sample2b[ii],1:10]-1)
df_control[ii,21:30]<-as.numeric(freq[sample3a[ii],1:10]+freq[sample3b[ii],1:10]-1)
df_control[ii,31:40]<-as.numeric(freq[sample4a[ii],1:10]+freq[sample4b[ii],1:10]-1)
df_control[ii,41:50]<-as.numeric(freq[sample5a[ii],1:10]+freq[sample5b[ii],1:10]-1)
}
XX<-new("SnpMatrix", as.matrix(df_control))
LD <- snpStats::ld(XX,XX,stat="R.squared")
levelplot(LD)
for (ii in 1:N0){
df_control[ii,1:10]<-as.numeric(freq[sample1a[ii],1:10]+freq[sample1b[ii],1:10]-1)
df_control[ii,11:20]<-as.numeric(freq[sample2a[ii],11:20]+freq[sample2b[ii],11:20]-1)
df_control[ii,21:30]<-as.numeric(freq[sample3a[ii],21:30]+freq[sample3b[ii],21:30]-1)
df_control[ii,31:40]<-as.numeric(freq[sample4a[ii],31:40]+freq[sample4b[ii],31:40]-1)
df_control[ii,41:50]<-as.numeric(freq[sample5a[ii],41:50]+freq[sample5b[ii],41:50]-1)
}
XX<-new("SnpMatrix", as.matrix(df_control))
LD <- snpStats::ld(XX,XX,stat="R.squared")
levelplot(LD)
max(LD[which(LD<0.99)])
max(LD[which(LD<0.9)])
max(LD[which(LD<0.8)])
plot(LD)
plot(c(LD))
plot(c(LD-diag(50)))
length(which(LD<0.1))
length(LD)
library(devtools)
install_github("mdfortune/simGWAS")
library(simGWAS)
load("~/Impact_Ref_Data/simulations/all_df_control.RData")
load("~/Impact_Ref_Data/simulations/freq/all_freq.RData")
snps<-colnames(freq)[-51]
W<-snps[1]
N0<-1000
N1<-1000
gamma.CV<-2
expected_z_score(N0,N1,snps,W,gamma.CV,freq)
simulated_z_score(N0,N1,snps,W,gamma.CV,freq,df_control)
library(devtools)
install_github("mdfortune/simGWAS")
library(simGWAS)
setwd("~/ABC/gamma_num_pmcc/gamma_num_scripts")
setwd("~/packages/simGWAS")
Rccp::compileAttributes()
library(devtools)
install_github("mdfortune/simGWAS")
library(devtools)
install_github("mdfortune/simGWAS")
library(simGWAS)
load("~/Impact_Ref_Data/simulations/all_df_control.RData")
load("~/Impact_Ref_Data/simulations/freq/all_freq.RData")
snps<-colnames(freq)[-51]
W<-snps[1]
N0<-1000
N1<-1000
gamma.CV<-2
expected_z_score(N0,N1,snps,W,gamma.CV,freq)
simulated_z_score(N0,N1,snps,W,gamma.CV,freq,df_control)
library(devtools)
install_github("mdfortune/simGWAS")
library(simGWAS)
load("~/Impact_Ref_Data/simulations/all_df_control.RData")
load("~/Impact_Ref_Data/simulations/freq/all_freq.RData")
snps<-colnames(freq)[-51]
W<-snps[1]
N0<-1000
N1<-1000
gamma.CV<-2
expected_z_score(N0,N1,snps,W,gamma.CV,freq)
simulated_z_score(N0,N1,snps,W,gamma.CV,freq,df_control)
library(devtools)
install_github("mdfortune/simGWAS")
library(simGWAS)
load("~/Impact_Ref_Data/simulations/all_df_control.RData")
load("~/Impact_Ref_Data/simulations/freq/all_freq.RData")
snps<-colnames(freq)[-51]
W<-snps[1]
N0<-1000
N1<-1000
gamma.CV<-2
expected_z_score(N0,N1,snps,W,gamma.CV,freq)
simulated_z_score(N0,N1,snps,W,gamma.CV,freq,df_control)
library(devtools)
install_github("mdfortune/simGWAS")
library(simGWAS)
load("~/Impact_Ref_Data/simulations/all_df_control.RData")
load("~/Impact_Ref_Data/simulations/freq/all_freq.RData")
snps<-colnames(freq)[-51]
W<-snps[1]
N0<-1000
N1<-1000
gamma.CV<-2
expected_z_score(N0,N1,snps,W,gamma.CV,freq)
simulated_z_score(N0,N1,snps,W,gamma.CV,freq,df_control)
SNPMatrix
SnpMatrix
SnpMatrix
?SnpMatrix
ld
library()
search()
library(bindata)
hap.gen.fn <-function(n,N,rho1=.7,rho2=0.4,rho3=0.1,mafL=.2,mafU=.3) {
maf <-runif(n*4,mafL,mafU) # 4 blocks of n=10 variants having MAF in [mafL,mafU]
c1 <- matrix(rho1,nrow=n,ncol=n) # correlation matrix for a block
diag(c1) <- 1
c2 <- matrix(rho2,nrow=n,ncol=n) # correlation matrix between certain blocks
c3 <- matrix(rho3,nrow=n,ncol=n)
C <- diag(1,n*3)
C[1:n,1:n] <-c1
C[(n+1):(2*n),(n+1):(2*n)] <-c1
C[(2*n+1):(3*n),(2*n+1):(3*n)] <-c1
C[1:n,(2*n+1):(3*n)] <- c2
C[(n+1):(2*n),(2*n+1):(3*n)]<-c2
C[1:n,(n+1):(2*n)] <- c3
C[lower.tri(C)] <-t(C)[lower.tri(C)]
cp <- bincorr2commonprob(maf[(n+1):(4*n)],C)
print(check.commonprob(cp))
S1 <- rmvbin(N,margprob=maf[1:n],bincorr=c1)
S234 <-rmvbin(N,margprob=maf[(n+1):(4*n)],bincorr=C)
haps <-cbind(S1,S234)
return(haps)
}
##
inv.logit.fn <-function(x) return(exp(x)/(1+exp(x)))
##
phen.gen.fn <-function(prev=0.1,beta=c(-2,.1,.1),haps,N0=100,N1=100) {
n <-dim(haps)[2]/4 # block size
N <-dim(haps)[1] # number of haplotypes
# select 1 causal from each of 2nd and 3rd blocks
causal.ind <-c(sample((n+1):(2*n),1),sample((2*n+1):(3*n),1))
causal <-haps[,causal.ind]
#indiv.ind <-sample(1:N,2*(N0+N1),replace=TRUE)
#indiv.ind <-sample(1:N,2*(N0+N1),replace=FALSE)
n0=0; n1=0; i=0
G0 <-NULL; G1<-NULL
while(n0<N0 | n1 <N1) {
indiv.ind <- sample(1:N,2,replace=FALSE)
G <-apply(haps[indiv.ind,],2,sum)
p <-inv.logit.fn(beta[1]+sum(beta[2:3]*G[causal.ind])+rnorm(1))
#print(c(p,n0,n1))
if(p<=prev) {
n1<-n1 + 1
G1 <-rbind(G1,G)
} else {
n0<-n0 + 1
G0 <-rbind(G0,G)
}
}
G<-rbind(G1[1:N1,],G0[1:N0,])
rownames(G)<-c(paste("case",1:N1,sep=""),paste("control",1:N0,sep=""))
colnames(G)<-paste("rs",1:dim(G)[2],sep="")
#return(list(G0=G0,G1=G1,n0=n0,n1=n1,causal.ind=causal.ind))
return(list(causal.ind=causal.ind,G=G,y=c(rep(1,N1),rep(0,N0)) ))
# output: G=genotype matrix (rows=indiv, cols=snps), y=case(1);control(0), causal.ind =indices of casual variants
}
library(bindata)
install.packages("bindata")
library(NCmisc)
must.use.package("bindata")
hap.gen.fn <-function(n,N,rho1=.7,rho2=0.4,rho3=0.1,mafL=.2,mafU=.3) {
maf <-runif(n*4,mafL,mafU) # 4 blocks of n=10 variants having MAF in [mafL,mafU]
c1 <- matrix(rho1,nrow=n,ncol=n) # correlation matrix for a block
diag(c1) <- 1
c2 <- matrix(rho2,nrow=n,ncol=n) # correlation matrix between certain blocks
c3 <- matrix(rho3,nrow=n,ncol=n)
C <- diag(1,n*3)
C[1:n,1:n] <-c1
C[(n+1):(2*n),(n+1):(2*n)] <-c1
C[(2*n+1):(3*n),(2*n+1):(3*n)] <-c1
C[1:n,(2*n+1):(3*n)] <- c2
C[(n+1):(2*n),(2*n+1):(3*n)]<-c2
C[1:n,(n+1):(2*n)] <- c3
C[lower.tri(C)] <-t(C)[lower.tri(C)]
cp <- bincorr2commonprob(maf[(n+1):(4*n)],C)
print(check.commonprob(cp))
S1 <- rmvbin(N,margprob=maf[1:n],bincorr=c1)
S234 <-rmvbin(N,margprob=maf[(n+1):(4*n)],bincorr=C)
haps <-cbind(S1,S234)
return(haps)
}
hap.gen.fn <-function(n,N,rho1=0.7,rho2=0.4,rho3=0.1,mafL=0.2,mafU=0.3) {}
hap.gen.fn <-function(n,N,rho1=0.7,rho2=0.4,rho3=0.1,mafL=0.2,mafU=0.3) {
maf <-runif(n*4,mafL,mafU) # 4 blocks of n=10 variants having MAF in [mafL,mafU]
c1 <- matrix(rho1,nrow=n,ncol=n) # correlation matrix for a block
diag(c1) <- 1
c2 <- matrix(rho2,nrow=n,ncol=n) # correlation matrix between certain blocks
c3 <- matrix(rho3,nrow=n,ncol=n)
C <- diag(1,n*3)
C[1:n,1:n] <-c1
C[(n+1):(2*n),(n+1):(2*n)] <-c1
C[(2*n+1):(3*n),(2*n+1):(3*n)] <-c1
C[1:n,(2*n+1):(3*n)] <- c2
C[(n+1):(2*n),(2*n+1):(3*n)]<-c2
C[1:n,(n+1):(2*n)] <- c3
C[lower.tri(C)] <-t(C)[lower.tri(C)]
cp <- bincorr2commonprob(maf[(n+1):(4*n)],C)
print(check.commonprob(cp))
S1 <- rmvbin(N,margprob=maf[1:n],bincorr=c1)
S234 <-rmvbin(N,margprob=maf[(n+1):(4*n)],bincorr=C)
haps <-cbind(S1,S234)
return(haps)
}
hap.gen.fn <-function(n,N,rho1=0.7,rho2=0.4,rho3=0.1,mafL=0.2,mafU=0.3) {
maf <-runif(n*4,mafL,mafU)}
hap.gen.fn <-function(n,N,rho1=0.7,rho2=0.4,rho3=0.1,mafL=0.2,mafU=0.3) {
maf <-runif(n*4,mafL,mafU) }
maf <-runif(n*4,mafL,mafU) # 4 blocks of n=10 variants having MAF in [mafL,mafU]
n=1000,N=10,rho1=0.7,rho2=0.4,rho3=0.1,mafL=0.2,mafU=0.3
n=1000
N=10
rho1=0.7
rho2=0.4
rho3=0.1
mafL=0.2
mafU=0.3
maf <-runif(n*4,mafL,mafU) # 4 blocks of n=10 variants having MAF in [mafL,mafU]
c1 <- matrix(rho1,nrow=n,ncol=n) # correlation matrix for a block
diag(c1) <- 1
c2 <- matrix(rho2,nrow=n,ncol=n) # correlation matrix between certain blocks
c3 <- matrix(rho3,nrow=n,ncol=n)
C <- diag(1,n*3)
C[1:n,1:n] <-c1
C[(n+1):(2*n),(n+1):(2*n)] <-c1
C[(2*n+1):(3*n),(2*n+1):(3*n)] <-c1
C[1:n,(2*n+1):(3*n)] <- c2
C[(n+1):(2*n),(2*n+1):(3*n)]<-c2
C[1:n,(n+1):(2*n)] <- c3
C[lower.tri(C)] <-t(C)[lower.tri(C)]
cp <- bincorr2commonprob(maf[(n+1):(4*n)],C)
print(check.commonprob(cp))
c1 <- matrix(rho1,nrow=n,ncol=n) # correlation matrix for a block
diag(c1) <- 1
c2 <- matrix(rho2,nrow=n,ncol=n) # correlation matrix between certain blocks
hap.gen.fn <-function(n=1000,N=10,rho1=0.7,rho2=0.4,rho3=0.1,mafL=0.2,mafU=0.3) {
maf <-runif(n*4,mafL,mafU) # 4 blocks of n=10 variants having MAF in [mafL,mafU]
c1 <- matrix(rho1,nrow=n,ncol=n) # correlation matrix for a block
diag(c1) <- 1
c2 <- matrix(rho2,nrow=n,ncol=n) # correlation matrix between certain blocks
c3 <- matrix(rho3,nrow=n,ncol=n)
C <- diag(1,n*3)
C[1:n,1:n] <-c1
C[(n+1):(2*n),(n+1):(2*n)] <-c1
C[(2*n+1):(3*n),(2*n+1):(3*n)] <-c1
C[1:n,(2*n+1):(3*n)] <- c2
C[(n+1):(2*n),(2*n+1):(3*n)]<-c2
C[1:n,(n+1):(2*n)] <- c3
C[lower.tri(C)] <-t(C)[lower.tri(C)]
cp <- bincorr2commonprob(maf[(n+1):(4*n)],C)
print(check.commonprob(cp))
S1 <- rmvbin(N,margprob=maf[1:n],bincorr=c1)
S234 <-rmvbin(N,margprob=maf[(n+1):(4*n)],bincorr=C)
haps <-cbind(S1,S234)
return(haps)
}
maf <-runif(n*4,mafL,mafU) # 4 blocks of n=10 variants having MAF in [mafL,mafU]
n
source("~/Impact_Ref_Data/simulations/jenna_simcorrbin.R")
source("~/Impact_Ref_Data/simulations/jenna_simcorrbin.R")
hap.gen.fn()
library(bindata)
install.packages("bindata")
#Hoping to find a pathological example where linear sum fails but my method works.
#Compute three potential outputs for the same model: my expected value, the expected value assuming a linear sum or the value obtained from simulating a case/control dataset.
library(lattice)
library(snpStats)
library(data.table)
library(snpStatsWriter)
library(plyr)
library(dplyr)
library(coloc)
library(mlogitBMA)
library(nnet)
library(devtools)
library(combinat)
library(boot)
library(Rcpp)
library(corpcor)
library(mvtnorm)
library(weights)
library(RColorBrewer)
source("/home/mdf34/iChipOld/iFunctions.R")
source("/home/mdf34/coloc/R/private.R")
source("/home/mdf34/coloc/R/claudia.R")
source("/home/mdf34/coloc/R/bma.R")
source("/home/mdf34/packages/simGWAS/R/make_dataset.R")
source("/home/mdf34/simgwas_package/true_zscore.R")
source("/home/mdf34/packages/simGWAS/R/extractsnps.R")
source("/home/mdf34/packages/simGWAS/R/est_zscore.R")
source("/home/mdf34/packages/simGWAS/R/make_GenoProbList.R")
source("/home/mdf34/packages/simGWAS/R/compute_gamma0.R")
Sys.setenv("PKG_CXXFLAGS"="-fopenmp")
Sys.setenv("PKG_LIBS"="-fopenmp")
Rcpp::sourceCpp('/home/mdf34/packages/simGWAS/src/w_sumsq.cpp')
Rcpp::sourceCpp('/home/mdf34/packages/simGWAS/src/test_prop.cpp')
Rcpp::sourceCpp('/home/mdf34/packages/simGWAS/src/algebra.cpp')
Rcpp::sourceCpp('/home/mdf34/packages/simGWAS/src/est_zscore.cpp')
Rcpp::sourceCpp('/home/mdf34/packages/simGWAS/src/happrobs.cpp')
#snps.int<-c("imm_10_6138830","imm_10_6134703","imm_10_6162015")
#How many cases and how many controls?
N0<-12747
N1<-2774
N<-N0+N1
#load the freq file
load("~/freqdatasets/T1D_regions/D_chr10_6068495_6237542_freq.RData")
z_score_sig<--qnorm((5*10^-8)/2)
#and get the SNP names
snps<-colnames(freq)[-ncol(freq)]
#c("imm_10_6134703","imm_10_6139051","imm_10_6162015","imm_10_6150931")
Tag<-"imm_10_6134703"
CV2<-"imm_10_6139051"
CV1<-"imm_10_6162015"
CV3<-"imm_10_6150931"
CV4<-"imm_10_6138830"
CV<-c(CV1,CV2,CV3,CV4)
m<-length(CV)
#compute the LD matrix
load("~/refdatasets/datafilesD/D_chr10_6068495_6237542.RData")
df<-df.t1d[which(df.t1d[,1]==0),(snps)]
XX<-new("SnpMatrix", as.matrix(df))
LD <- snpStats::ld(XX,XX,stat="R",symmetric=TRUE)
LD<-as.matrix(make.positive.definite(LD))
#what is P(Y=1 | W=w) in our desired dataset?
GenoProbList<-make_GenoProbList(snps,CV,freq)
GenoProbXW<-GenoProbList[[1]]
# COMPUTE P(W=w|Y=0) from our reference dataset
PWgY0<-GenoProbXW[[1]]+GenoProbXW[[2]]+GenoProbXW[[3]]
#make a gamma
gamma.CV<-c(0.25,0.25,0.25,0.25)
compute_gamma0_gammaonly<-function(gamma.CV){
e.eta.CV<-exp(rowSums(sweep((hcube(rep(3,m))-1),MARGIN=2,gamma.CV,`*`)))
gamma0<-log(N1)-log(N0)-log(sum(e.eta.CV*PWgY0))
return(gamma0)
}
gamma<-c(compute_gamma0_gammaonly(gamma.CV),gamma.CV)
eta<-gamma[1]+rowSums(sweep((hcube(rep(3,m))-1),MARGIN=2,gamma[-1],`*`))
PY1gW<-exp(eta)/(1+exp(eta))
# compute P(W=w) for a random choice from the sample
PW<-(N0/N)*(PWgY0/(1-PY1gW))
#compute the value of P(W=w|Y=1) we wish to see in our simulated datasets
PWgY1<-(N/N1)*PY1gW*PW
####################################################################
# Compute the expected value using linear sum
####################################################################
cvec<-rep(0,length(snps))
cvec[which(snps==CV1)]<--1
cvec[which(snps==CV2)]<-1
cvec[which(snps==CV3)]<-1
cvec[which(snps==CV4)]<-1
cvec<-matrix(cvec)
lambdac<-6
est_z_score_linear<-lambdac*LD%*%cvec
sim_z_score_linear<-rmvnorm(n=1, mean = lambdac*LD%*%cvec, sigma = LD)
####################################################################
# Compute my expected value
####################################################################
est_z_score_mdf<-est_statistic(N0,N1,snps,CV,gamma[-1],freq,GenoProbList)
CV
est_z_score_mdf<-est_statistic(N0,N1,snps,CV,rep(0,length(CV)),freq,GenoProbList)
plot(est_z_score)
plot(est_z_score_mdf)
